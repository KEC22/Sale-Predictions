getwd()
setwd("~/Desktop/Course 2/Raw Data/New_Products_Analysis_Data")

summary(existing)

library(readr)
existing <- read.csv("~/Desktop/Course 2/Raw Data/New_Products_Analysis_Data/existing product attributes.csv", header = TRUE, stringsAsFactors = FALSE)

str(existing)
names(existing)

plot(existing$Price)

str(existing)

names(existing) <- c("Type", "Number", "Price", "Five", "Four", "Three", "Two", "One", "Positive", "Negative", "Consumer", "Best", "Weight", "Depth", "Width","Height","Margin","Volume")
names(existing)[2] <- "Numbers"

existing$'Type' <- NULL
str(existing)
existing$Best<- as.numeric(existing$Best)
existing$Best[is.na(existing$Best)] <- mean(existing$Best, na.rm = TRUE)

str(existing)
summary(existing)

trainSize <- round(nrow(existing) * 0.7)
testSize <- nrow(existing) - trainSize

set.seed(123)
training_indices <- sample(seq_len(nrow(existing)), size = trainSize)
trainSet <- existing[training_indices, ]
testSet <- existing[-training_indices, ]

model <- lm(formula = trainSet$Volume ~ . , data = trainSet)

summary(model)
summary(existing)

cor(existing)

install.packages("corrplot")
library(corrplot)
correlationmatrix<- cor(existing)
corrplot(correlationmatrix, method="circle")

corrplot(correlationmatrix, method="number")
corrplot(correlationmatrix, method="color")

existing$Five <- NULL

set.seed(123)
trainSize <- round(nrow(existing) * 0.7)
testSize <- nrow(existing) - trainSize
training_indices <- sample(seq_len(nrow(existing)), size = trainSize)
trainSet <- existing[training_indices, ]
nrow(trainSet)
testSet <- existing[-training_indices, ]
model <- lm(formula = trainSet$Volume ~ . , data = trainSet)
summary(model)

predictions <- predict(model, testSet, interval = "predict", level = .95)
head(predictions)
summary(predictions)

#import new product data
newData <- read.csv("new product attributes.csv", header = TRUE, stringsAsFactors = FALSE)
names(newData) <- c("Type","Number","Price","Five","Four","Three","Two","One","Positive","Negative","Consumer","Best","Weight","Depth","Width","Height","Margin","Volume")
newData$'Type'<-NULL
newData$Best<-as.numeric(newData$Best)
newData$'Five' <- NULL

library(e1071)
install.packages('e1071')
#create svm model

svmmodel <- svm(trainSet$Volume~., data = trainSet)
summary(svmmodel) #view summary before making predictions
svmTestPred <- predict(svmmodel, testSet)
svmTestPred

rmse <- function(error)
{
  sqrt(mean(error^2))
}

error <- testSet$Volume - svmTestPred
svrPredictionRMSE <- rmse(error)
svrPredictionRMSE

newsvmPred <- predict(svmmodel, newdata = newData)
newsvmPred #predictions where kernel=radial, cost=1, gamma=0.0833; view in summary
#need to tune model; find best values for cost and gamma

obj <- tune.svm(Volume~., data = trainSet, gamma = 2^(-1:1), cost = 2^(2:4))

obj #10-fold cross-validataion; kernel = radial, gamma = 0.5, cost = 4
newsvmmodel <- svm(Volume~., data = trainSet, cost = 4, gamma = 0.5)
newsvmmodel
svmTestPredTuned <- predict(newsvmmodel, testSet)
newsvmPredTuned <- predict(newsvmmodel, newdata = newData)
newsvmPredTuned

rmse <- function(error)
{
  sqrt(mean(error^2))
}

error <- testSet$Volume - svmTestPredTuned
svrPredictionRMSE <- rmse(error)
svrPredictionRMSE

library(randomForest)
rfmodel <- randomForest(Volume~., data = trainSet)
rfmodel #see regression rf with 500 trees w/ 4 var tried at each split
rfTestPred <- predict(rfmodel, testSet)
newrfPred <- predict(rfmodel, newdata = newData)
newrfPred
